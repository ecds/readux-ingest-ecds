# Generated by Django 3.2.23 on 2024-01-30 17:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Canvas',
            fields=[
                ('pid', models.CharField(default=uuid.uuid4, max_length=255, primary_key=True, serialize=False)),
                ('position', models.IntegerField()),
                ('width', models.IntegerField(default=0)),
                ('height', models.IntegerField(default=0)),
                ('ocr_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('default_ocr', models.CharField(choices=[('word', 'word'), ('line', 'line'), ('both', 'both')], default='word', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('pid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ImageServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_base', models.CharField(max_length=255)),
                ('storage_service', models.CharField(default='local', max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Manifest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.CharField(default=uuid.uuid4, max_length=255, serialize=False)),
                ('published_city', models.TextField(blank=True, null=True)),
                ('publisher', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('collections', models.ManyToManyField(blank=True, related_name='manifests', to='iiif.Collection')),
                ('image_server', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='iiif.imageserver')),
            ],
        ),
        migrations.CreateModel(
            name='RelatedLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.TextField(blank=True, default=' ', null=True)),
                ('format', models.TextField(blank=True, default='text/html', null=True)),
                ('is_structured_data', models.BooleanField(default=False)),
                ('manifest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iiif.manifest')),
            ],
        ),
        migrations.CreateModel(
            name='OCR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.IntegerField(default=0)),
                ('y', models.IntegerField(default=0)),
                ('w', models.IntegerField(default=0)),
                ('h', models.IntegerField(default=0)),
                ('order', models.IntegerField(default=0)),
                ('content', models.TextField(blank=True, default=' ', null=True)),
                ('resource_type', models.CharField(choices=[('cnt:ContentAsText', 'ocr'), ('dctypes:Text', 'text')], default='dctypes:Text', max_length=50)),
                ('canvas', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='iiif.canvas')),
            ],
        ),
        migrations.AddField(
            model_name='canvas',
            name='manifest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='iiif.manifest'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
